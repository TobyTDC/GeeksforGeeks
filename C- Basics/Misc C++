Inline functions are useful when
(A) Function is large with many nested loops
(B) Function has many static variables
(C) Function is small and we want to avoid function call overhead.
(D) None of the above


Answer: (C) 

Explanation: Inline functions are generally used in place of small macros. They are substitute to macros and better than macros. See following for details.
http://en.wikipedia.org/wiki/Inline_function#Comparison_with_macros



#include<iostream>
using namespace std;
int x = 1;
void fun()
{
    int x = 2;
    {
        int x = 3;
        cout << ::x << endl;
    }
}
int main()
{
    fun();
    return 0;
}
Run on IDE
(A) 1
(B) 2
(C) 3
(D) 0


Answer: (A) 

Explanation: The value of ::x is 1.

The scope resolution operator when used with a variable name, always refers to global variable.





#include<iostream>
using namespace std;
 
union A {
  int a;
  unsigned int b;
  A() { a = 10; }
  unsigned int getb() {return b;}
};
 
int main()
{
    A obj;
    cout << obj.getb();
    return 0;
}
Run on IDE
(A) Compiler Error: union can’t have functions
(B) Compiler Error: can’t access private members of A
(C) 10
(D) garbage value


Answer: (C) 

Explanation: Like struct and class, union can have methods. Like struct and unlike class, members of union are public by default.

Since data members of union share memory, the value of b becomes same as a.





Which of the following is true about inline functions and macros.
(A) Inline functions do type checking for parameters, macros don’t
(B) Macros are processed by pre-processor and inline functions are processed in later stages of compilation.
(C) Macros cannot have return statement, inline functions can.
(D) Macros are prone to bugs and errors, inline functions are not.
(E) All of the above


Answer: (E) 




How can we make a C++ class such that objects of it can only be created using new operator?

If user tries to create an object directly, the program produces compiler error.
(A) Not possible
(B) By making destructor private
(C) By making constructor private
(D) By making both constructor and destructor private


Answer: (B) 

Explanation: See the following example.

// Objects of test can only be created using new
class Test
{
private:
    ~Test() {}
friend void destructTest(Test* );
};
 
// Only this function can destruct objects of Test
void destructTest(Test* ptr)
{
    delete ptr;
}
 
int main()
{
    // create an object
    Test *ptr = new Test;
 
    // destruct the object
    destructTest (ptr);
 
    return 0;
}





Would destructor be called, if yes, then due to which vector?

#include <iostream>
#include <vector>
using namespace std;
 
class a
{
public :
    ~a()
    {
        cout << "destroy";
    }
};
int main()
{
   vector <a*> *v1  = new vector<a*>;
   vector <a> *v2  = new vector<a>;
   return 0;
}
Run on IDE
(A) v1
(B) v2
(C) v1 and v2
(D) no destructor call





#include<iostream>
using namespace std;
 
int x[100];
int main()
{
    cout << x[99] << endl;
}
Run on IDE
This question is contributed by Sudheendra Baliga
(A) Unpredictable
(B) Runtime error
(C) 0
(D) 99


Answer: (C) 

Explanation: The correct answer is c. In C++ all the uninitialized global variables are initialized to 0.

